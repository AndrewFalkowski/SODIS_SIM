import numpy as npimport pandas as pdfrom Utils.utils import *class TubeThermal:    def __init__(self, TP_len, v_len, n_tube_units, mod_width, D_ri=66E-3, D_ro=70E-3, D_ci=109E-3,                 D_co=115E-3, T_am=298, Irr=1000, V=0.025, T_in=298, Re=156,                 Pr=5, Wa=0.5, C=26):        self.model_params = {            'TP_len': TP_len, # Width of PTC (m)            'v_len': v_len, # Length of PTC (m)            'n_tube_units': n_tube_units,            'mod_width': mod_width,            'D_ri': D_ri, # receiver inner D (m)            'D_ro': D_ro, # reciever outer D (m)            'D_ci': D_ci, # cover inner D (m)            'D_co': D_co, # cover outer D (m)            'A_ri': 0.0, # reciever inner A (m^2)            'A_ro': 0.0, # reciever outer A (m^2)            'A_ci': 0.0, # cover inner A (m^2)            'A_co': 0.0, # cover outer A (m^2)            'E_r': 0.1, # reciever emittance            'E_c': 0.9, # cover emittance            'a_a': 0.96, # absorber absorbance            't_c': 0.95, # cover transmittance            'p_c': 0.83, # concentrator reflectance            'gamma': 0.99, # intercept factor            'sig': 5.67E-8, # W / m^2 K            'T_am': T_am, # ambient temperature (K)            'Irr': Irr, # solar direct beam irradiation (W/m^2)            'Wa': Wa, # mirror width            'C': C, # concentration ratio            'Q_s': 0.0, # Solar heat flux (W)            'h_out': 10, # transfer coefficent for cover (W/m^2 K)            'h_in': 0.0, # heat transfer coefficient for absorber-fluid (W/m^2 K)            'V': V , # volumetric flow rate (m^3/s)            'm': 0.0, # mass flow rate (kg/s) # calc            'C_p': 4.169, # specific heat J/kg K            'T_in': T_in, # inlet temperature (K)            'n_opt': 0.0, # max optical efficiency # calc            'Re': Re,            'Pr': Pr            }        self.mp = pd.Series(self.model_params)        self.mp = calc_tube_params(self.mp)        self.calc_properties()    def calc_properties(self):        thermal_prop = {            'n_th' : calc_n_th(self.mp),            'Q_loss' : calc_Q_loss(self.mp),            'Q_u' : calc_Q_u(self.mp),            'T_r' : calc_T_r(self.mp),            'T_c' : calc_T_c(self.mp),            'T_out': calc_T_out(self.mp),            'T_fm': calc_T_fm(self.mp)            }        self.thermal_prop = pd.Series(thermal_prop)        return self.thermal_prop