import numpy as npdef calc_Nu_tube(mp):    Nu = 3.66 + ((0.0667 * mp.Re * mp.Pr * ((mp.D_ri)/(mp.L)))/(1 + 0.04 *(mp.Re * mp.Pr * ((mp.D_ri)/(mp.L)))**(2/3)))    return Nudef calc_Nu_box(mp):    Nu = 3.66 + ((0.0667 * mp.Re * mp.Pr * ((mp.vol/mp.A_ri)/(np.sqrt(mp.A_ri))))/(1 + 0.04 *(mp.Re * mp.Pr * ((mp.vol/mp.A_ri)/(np.sqrt(mp.A_ri))))**(2/3)))    return Nudef surface_area(D, mp):    SA = 2 * np.pi * radius(mp[f'{D}']) * mp.L + 2 * mp.L * radius(mp[f'{D}'])**2    return SAdef radius(D):    r = D/2    return rdef K1(mp):    K_1 = mp.A_co * mp.E_c * mp.sig * 4 * mp.T_am**3 + mp.A_co * mp.h_out    return K_1def E_r_s(mp):    E_r_star = ((1/mp.E_r) + (1-mp.E_c)/(mp.E_c) * ((mp.A_ro)/(mp.A_ci)))**(-1)    return E_r_stardef K2(mp):    K_2 = mp.A_ro * E_r_s(mp) * mp.sig * (1+(4 * mp.T_am**3 * mp.A_ro * E_r_s(mp) * mp.sig)/(K1(mp)))**(-1)    return K_2def K3(mp):    K_3 = ((1)/(mp.A_ri*mp.h_in) + (1)/(2*mp.m*mp.C_p))**(-1)    return K_3def K4(mp):    K_4 = mp.n_opt * (1+((4*mp.T_in**3 * K2(mp))/(K3(mp))))**(-1)    return K_4def K5(mp):    K_5 = K2(mp) * (1+((4*mp.T_in**3 * K2(mp))/(K3(mp))))**(-1)    return K_5def calc_Q_s(mp):    # heat flux solar (W) I am assuming this is Gb/area    # we can check this with n_op * Qs = Qu * Qloss    Q_s = mp.G_b/mp.A_co    return Q_sdef calc_tube_params(mp):    mp.A_ri = surface_area('D_ri', mp)    mp.A_ro = surface_area('D_ro', mp)    mp.A_ci = surface_area('D_ci', mp)    mp.A_co = surface_area('D_co', mp)    mp.n_opt = mp.p_c * mp.gamma * mp.t_c * mp.a_a    # mp.Re = (999 * mp.V * mp.L) / 0.38  # adjust later    # mp.Pr = (0.38 * 4.169) / (-8.354E-6*mp.T_in**2+6.53e-3*mp.T_in-0.5981)    mp.h_in = (calc_Nu_tube(mp)*(-8.354E-6*mp.T_in**2+6.53e-3*mp.T_in-0.5981))/(mp.D_ri)    mp.m = 999 *  mp.V # density in kg/m^3    mp.Q_s = calc_Q_s(mp) # W    return mpdef calc_box_params(mp):    mp.n_opt = mp.t_c * mp.a_a * 0.98    mp.Re = 8.9 # adjust later    mp.Pr = (0.38 * 4.169) / (-8.354E-6*mp.T_in**2+6.53e-3*mp.T_in-0.5981)    mp.h_in = (calc_Nu_box(mp)*(-8.354E-6*mp.T_in**2+6.53e-3*mp.T_in-0.5981))/(mp.vol/mp.A_ri)    mp.m = 999 *  mp.V # density in kg/m^3    mp.Q_s = calc_Q_s(mp) # W    return mpdef calc_Q_s(mp):    # heat flux solar (W) I am assuming this is Gb/area    # we can check this with n_op * Qs = Qu * Qloss    Q_s = mp.G_b*mp.A_co    return Q_sdef calc_n_th(mp):    # calculate the thermal efficiency of the solar concentrator    n_th = K4(mp) - K5(mp) * ((mp.T_in**4 - mp.T_am**4)/(mp.A_a * mp.G_b))    return n_thdef calc_Q_loss(mp):    # calculate thermal losses    Q_loss = (mp.n_opt - K4(mp)) * calc_Q_s(mp) + K5(mp) * (mp.T_in**4 - mp.T_am**4)    return Q_lossdef calc_T_r(mp):    # calculate temperature of receiver    T_r = mp.T_in + (K4(mp))/(K3(mp)) * calc_Q_s(mp) - (K5(mp))/(K3(mp))*(mp.T_in**4 - mp.T_am**4)    return T_rdef calc_T_c(mp):    # Calculate temperature of cover    T_c = mp.T_am + (mp.n_opt - K4(mp))/(K1(mp)) * calc_Q_s(mp) + (K5(mp))/(K1(mp)) * (mp.T_in**4 - mp.T_am**4)    return T_cdef calc_T_out(mp):    # Calculate outlet temperature    T_out = mp.T_in + (K4(mp))/(mp.m * mp.C_p) * calc_Q_s(mp) - (K5(mp))/(mp.m * mp.C_p) * (mp.T_in**4 - mp.T_am**4)    return T_outdef calc_T_fm(mp):    # calculate average fluid temperature    T_fm = mp.T_in + (K4(mp))/(2 * mp.m * mp.C_p) * calc_Q_s(mp) - (K5(mp))/(2*mp.m*mp.C_p) *  (mp.T_in**4 - mp.T_am**4)    return T_fmdef calc_Q_u(mp):    Q_u = K4(mp) * calc_Q_s(mp) - K5(mp) * (mp.T_in**4 - mp.T_am**4)    return Q_u